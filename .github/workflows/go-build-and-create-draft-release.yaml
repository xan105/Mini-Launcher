name: Build release on Windows

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
      - 'master'
    paths:
      - 'winres/winres.json'

jobs:
  build-and-release:
    runs-on: windows-latest
    if: github.event_name == 'workflow_dispatch' || startsWith(github.event.head_commit.message, 'v')

    steps:
      - uses: actions/checkout@v4
      
      - name: Get Go version from go.mod
        id: go_version
        shell: powershell
        run: |
          $modPath = "src\go.mod"
          $line = Get-Content $modPath | Where-Object { $_ -match '^go\s+\d' }
          $version = ($line -split '\s+')[1]
          Write-Output "go_version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ steps.go_version.outputs.go_version }}

      - name: Install 7-Zip
        run: choco install 7zip -y
        
      - name: Install go-winres
        run: go install github.com/tc-hib/go-winres@latest

      - name: Install dependencies
        working-directory: src
        run: go mod download

      - name: Run Windows build script
        run: .\build.cmd

      - name: Determine version from commit
        id: get_version
        shell: powershell
        run: |
          if ($env:GITHUB_EVENT_NAME -eq "workflow_dispatch") {
            $jsonPath = "winres\winres.json"
            $json = Get-Content $jsonPath -Raw | ConvertFrom-Json
            $version = $json.RT_VERSION.'#1'.info.'0409'.FileVersion
            Write-Output "Using version from winres.json: $version"
            Write-Output "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8
          else
            $commit = '${{ github.event.head_commit.message }}'
            $version = $commit.Substring(1)  # remove leading 'v'
            Write-Output "Using version from commit message: $version"
            Write-Output "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8

      - name: Extract repo name
        id: repo_name
        shell: powershell
        run: |
          $repoName = "${{ github.repository }}" -split '/' | Select-Object -Last 1
          Write-Output "repo_name=$repo" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8

      - name: Create 7z Archive for Release
        id: create-archive
        shell: powershell
        run: |
          $archiveName = "build\$repoName.7z"
          Write-Output "Archive will be: $archiveName"
        
          # Create a temp folder
          $tmp = "build\release"
          Remove-Item $tmp -Recurse -Force -ErrorAction SilentlyContinue
          New-Item -ItemType Directory -Path $tmp | Out-Null
        
          # Copy files to temp folder
          New-Item -ItemType Directory -Path $tmp\x86 | Out-Null
          Copy-Item "build\x86\Release\Launcher.exe" $tmp\x86 -Force
          Copy-Item "dist\launcher.json" $tmp\x86 -Force
          New-Item -ItemType Directory -Path $tmp\x64 | Out-Null
          Copy-Item "build\x64\Release\Launcher.exe" $tmp\x64 -Force
          Copy-Item "dist\launcher.json" $tmp\x64 -Force
          New-Item -ItemType Directory -Path $tmp\lua | Out-Null
          Copy-Item "dist\lua\Examples on GitHub.url" $tmp\lua -Force
          Copy-Item "dist\lua\launcher.lua" $tmp\lua -Force
          Copy-Item "dist\URL.url" $tmp -Force
          Copy-Item "README.md" $tmp -Force
          Copy-Item "LICENSE" $tmp -Force

          # Create archive
          & "C:\Program Files\7-Zip\7z.exe" a $archiveName "$tmp\*"

          # Clean up
          Remove-Item $tmp -Recurse -Force

          # Output archive path for later
          Write-Output "archive=$archiveName" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8

      - name: Create Draft Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: ${{ steps.repo_name.outputs.repo_name }}
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload 7z Archive to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.create-archive.outputs.archive }}
          asset_name: ${{ steps.repo_name.outputs.repo_name }}
          asset_content_type: application/x-7z-compressed
